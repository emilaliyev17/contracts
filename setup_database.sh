#!/bin/bash

# Contract Analyzer - Database Setup Script
# This script creates the PostgreSQL database and user for the contract analyzer project

set -e  # Exit on any error

echo "============================================================"
echo "Contract Analyzer - Database Setup"
echo "============================================================"

# Configuration
DB_NAME="contract_analyzer_db"
DB_USER="contract_user"
DB_PASSWORD="contract_secure_2024!"
DB_HOST="localhost"
DB_PORT="5432"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if PostgreSQL is running
print_status "Checking if PostgreSQL is running..."
if ! pg_isready -h $DB_HOST -p $DB_PORT > /dev/null 2>&1; then
    print_error "PostgreSQL is not running on $DB_HOST:$DB_PORT"
    echo "Please start PostgreSQL first:"
    echo "  brew services start postgresql@16"
    exit 1
fi
print_success "PostgreSQL is running"

# Check if we can connect to PostgreSQL as superuser
print_status "Testing PostgreSQL connection..."
if ! psql -h $DB_HOST -p $DB_PORT -U postgres -d postgres -c '\q' > /dev/null 2>&1; then
    print_error "Cannot connect to PostgreSQL as superuser"
    echo "Please ensure PostgreSQL is properly installed and running"
    echo "You may need to create a superuser first:"
    echo "  createuser -s postgres"
    exit 1
fi
print_success "Connected to PostgreSQL as superuser"

# Create database
print_status "Creating database '$DB_NAME'..."
if psql -h $DB_HOST -p $DB_PORT -U postgres -d postgres -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
    print_warning "Database '$DB_NAME' already exists"
else
    psql -h $DB_HOST -p $DB_PORT -U postgres -d postgres -c "CREATE DATABASE $DB_NAME;"
    print_success "Database '$DB_NAME' created successfully"
fi

# Create user
print_status "Creating user '$DB_USER'..."
if psql -h $DB_HOST -p $DB_PORT -U postgres -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'" | grep -q 1; then
    print_warning "User '$DB_USER' already exists"
    print_status "Updating password for user '$DB_USER'..."
    psql -h $DB_HOST -p $DB_PORT -U postgres -d postgres -c "ALTER USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
    print_success "Password updated for user '$DB_USER'"
else
    psql -h $DB_HOST -p $DB_PORT -U postgres -d postgres -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
    print_success "User '$DB_USER' created successfully"
fi

# Grant privileges
print_status "Granting privileges to user '$DB_USER'..."
psql -h $DB_HOST -p $DB_PORT -U postgres -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
psql -h $DB_HOST -p $DB_PORT -U postgres -d $DB_NAME -c "GRANT ALL PRIVILEGES ON SCHEMA public TO $DB_USER;"
psql -h $DB_HOST -p $DB_PORT -U postgres -d $DB_NAME -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $DB_USER;"
psql -h $DB_HOST -p $DB_PORT -U postgres -d $DB_NAME -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $DB_USER;"
psql -h $DB_HOST -p $DB_PORT -U postgres -d $DB_NAME -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $DB_USER;"
psql -h $DB_HOST -p $DB_PORT -U postgres -d $DB_NAME -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $DB_USER;"
print_success "Privileges granted to user '$DB_USER'"

# Test connection with new user
print_status "Testing connection with new user..."
if psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c '\q' > /dev/null 2>&1; then
    print_success "Connection test successful with user '$DB_USER'"
else
    print_error "Connection test failed with user '$DB_USER'"
    exit 1
fi

# Create .env file
print_status "Creating .env file..."
cat > .env << EOF
# Contract Analyzer - Environment Configuration
# Generated by setup_database.sh on $(date)
# NEVER commit this file to version control

# Database Configuration
DATABASE_NAME=$DB_NAME
DATABASE_USER=$DB_USER
DATABASE_PASSWORD=$DB_PASSWORD
DATABASE_HOST=$DB_HOST
DATABASE_PORT=$DB_PORT

# Django Configuration
SECRET_KEY=jba!e1hu\$hhh%vr@#^!c_a2#deo(vjm5fy_1fgr6-_g+9%+w!z
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# File Upload Settings
MAX_UPLOAD_SIZE=10485760
EOF

print_success ".env file created successfully"

echo ""
echo "============================================================"
echo "Database Setup Complete!"
echo "============================================================"
echo "Database Name: $DB_NAME"
echo "Database User: $DB_USER"
echo "Database Host: $DB_HOST"
echo "Database Port: $DB_PORT"
echo ""
echo "Next steps:"
echo "1. Run: source venv/bin/activate"
echo "2. Run: python manage.py migrate"
echo "3. Run: python manage.py createsuperuser"
echo "4. Run: python manage.py runserver"
echo ""
echo "Test the setup with:"
echo "  python test_db_connection.py"
echo "  python manage.py check_setup --verbose"
echo "============================================================"
